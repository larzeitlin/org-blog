{"version":3,"sources":["org_blog/core.cljs"],"mappings":";AAYA,AAAKA,uBACH,qDAAA,mFAAA,mFAAA,IAAA,gEAAA,mFAAA,SAAA,mFAAA,GAAA,8DAAA,mFAAA,YAAA,oEAAA,mFAAA,SAAA,9wBAACC;AAOH,AAAA,yBAAA,iCAAAC,1DAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,4DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,8DAAA,iBAAAG,/EAAMD,yEAAUS;AAAhB,AAAA,IAAAP,aAAAD;aAAA,AAAAE,4CAAAD,WAAA,IAAA,pEAAyBQ;AAAzB,AACE,oBAAIA;AACF,OAAA,mFAAO,AAACC,4DAAqBnB,qBAAOiB,MAAMC;;AAC1C,OAAA,mFAAO,AAACC,4DAAqBnB,qBAAOiB;;;;AAHxC,CAAA,iDAAA,jDAAMT;;AAAN;AAAA,CAAA,2CAAA,WAAAI,tDAAMJ;AAAN,AAAA,IAAAK,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AAQA,0BAAA,1BAAMQ;AAAN,AACE;AAAA,AAAA,0FAAA,+DAAA,mFAAA,kDAAA,iCAAA,mFAAA,kDAAA,mFAAA,gDAAA,mFAAA,gDAAA,2CAAA,2IAAA,tFAIoB,uBAAA,vBAACZ;;;AAGvB,AAAKa,2BAAW,AAACC,gDAAQC,0BAAaf;AAEtC,2BAAA,3BAAMgB;AAAN,AACE;AAAA,AAAA,0FAAA,+DAAA,mFAAA,8CAAA,mFAAA,kDAAA,4BAAA,mFAAA,8CAAA,mFAAA,+CAAA,sBAAA,qMAAA,mFAAA,+CAAA,eAAA;;;AAWF,yBAAA,zBAAMC,0DAAUR;AAAhB,AACE,IAAAS,WAAMT;IAANS,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,qEAAA,AAAA,4FAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,yEAAA,AAAA,mEAAA,AAAA,qBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,KAAA,kBAAAN,yBAAA,AAAA,AAAAA,uCAAA;;;KAAA;AAAA,sEAAA,AAAA,+FAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,yEAAA,AAAA,qEAAA,AAAA,qBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,KAAA,kBAAAI,0BAAA,AAAA,AAAAA,wCAAA;;;KAAA;AAAA,sEAAA,AAAA,+FAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,yEAAA,AAAA,qEAAA,AAAA,qBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,qBAAA,AAAA,KAAA,kBAAAH,0BAAA,AAAA,AAAAA,wCAAA;;;KAAA;AAAA,sEAAA,AAAA,8FAAA,wCAAA,gDAAA,qDAAA,sDAAA,iEAAA,yDAAA,oDAAA,6DAAA,6DAAA,mDAAA,sDAAA,AAAA,6EAAA,AAAA,mEAAA,AAAA,sBAAA,AAAA,GAAA,AAAA,EAAA,AAAA,GAAA,AAAA,GAAA,AAAA,iDAAA,AAAA,KAAA,kBAAAO,0BAAA,AAAA,AAAAA,wCAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,mEAAAH;;;;AAUF,6BAAA,7BAAMI;AAAN,AACE;AAAA,AACE,IAAMC,OAAK,AAAA,mGAAe,oBAAA,pBAACC;AAA3B,AAAA,0FAAA,mDAAA,mFAAA,wDAAA,mFAAA,8CAAA,mFAAA,gDAAA,2CAAA,6IAAA,eAAA,MAAA,mFAAA,gDAAA,2CAAA,4IAAA,gCAAA,gGAAA,mFAAA,yDAAA,mFAAA,8CAAA,0BAAA,mFAAA,gDAAA,2CAAA,qDAAA,oDAAA,rmCAGmB,uBAAA,vBAACxB,gVACJ,uBAAA,vBAACA,0MACbuB;;;AAOR,2BAAA,3BAAME;AAAN,AACE,wDAAA,jDAACC,oIAAaJ,mCAAc,wBAAA,xBAAiBK;;AAE/C,2BAAA,3BAAMC;AAAN,AACE,2CAAA,2CAAA,tFAACC,yJAEC,WAAKC;AAAL,AACE,IAAMC,QAAM,AAACC,8BAAqBxC,qBAAOsC;IACnCG,eAAa,AAAA,mFAAO,AAAA,mFAAQF;IAC5BG,eAAa,AAAA,gGAAcH;AAFjC,AAGE,iCAAA,sDAAA,2CAAA,0GAAA,rOAACI,gMAAmC,AAAClB,uBAASgB,mFACVC;GAP1C,qEASE,WAAKJ;AAAL,AACE,OAACM,mBAAQ,AAACJ,8BAAqBxC,qBAAOsC;;;AAC1C,AAACO;;AACD,OAACZ","names":["org-blog.core/router","reitit.frontend.router","var_args","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","org-blog.core/path-for","p__14596","vec__14597","cljs.core.nth","seq14593","G__14595","cljs.core/first","cljs.core/next","self__4851__auto__","route","params","reitit.frontend.match_by_name","org-blog.core/home-page","org-blog.core/posts-page","cljs.core.partial","org-blog.posts/posts-page","org-blog.core/about-page","org-blog.core/page-for","G__14601","cljs.core/Keyword","org-blog.posts/post-page","js/Error","org-blog.core/current-page","page","reagent.session/get","org-blog.core/mount-root","reagent.dom.render","js/document","org-blog.core/init!","accountant.core/configure-navigation!","path","match","reitit.frontend/match-by-path","current-page","route-params","reagent.session/put!","cljs.core/boolean","accountant.core/dispatch-current!"],"sourcesContent":["(ns org-blog.core\n  (:require\n   [reagent.dom :as rdom]\n   [reagent.session :as session]\n   [org-blog.posts :as p]\n   [reitit.frontend :as reitit]\n   [accountant.core :as accountant]))\n\n;; -------------------------\n;; Routes\n\n\n(def router\n  (reitit/router\n   [[\"/\" :index]\n    [\"/posts\"\n     [\"\" :posts]\n     [\"/:post-id\" :post]]\n    [\"/about\" :about]]))\n\n(defn path-for [route & [params]]\n  (if params\n    (:path (reitit/match-by-name router route params))\n    (:path (reitit/match-by-name router route))))\n\n;; -------------------------\n;; Page components\n\n(defn home-page []\n  (fn []\n    [:span.main\n     [:h1 \"Welcome to orgblogcljs\"]\n     [:ul\n      [:li [:a {:href (path-for :posts)} \"Blog posts\"]]]]))\n\n\n(def posts-page (partial p/posts-page path-for))\n\n(defn about-page []\n  (fn [] [:span.main\n          [:p\n           [:h1 \"About orgblogcljs\"]\n           [:p [:b \"Orgblogcljs\" ] \" is a minimalist static site blog that can be hosted on services like GitHub Pages.\n                   It's made with Clojurescript and Reagent.\n                   Posts are writting in emacs \" [:b \".org\"] \" format.\"]]]))\n\n\n;; -------------------------\n;; Translate routes -> page components\n\n(defn page-for [route]\n  (case route\n    :index #'home-page\n    :about #'about-page\n    :posts #'posts-page\n    :post #'p/post-page))\n\n\n;; -------------------------\n;; Page mounting component\n\n(defn current-page []\n  (fn []\n    (let [page (:current-page (session/get :route))]\n      [:div\n       [:header\n        [:p [:a {:href (path-for :index)} \"Home\"] \" | \"\n         [:a {:href (path-for :about)} \"About\"]]]\n       [page]\n       [:footer\n        [:p \"This blog is made with \" [:a {:href \"https://github.com/larzeitlin/orgblogcljs\"} \"orgblogcljs.\"]]]])))\n\n;; -------------------------\n;; Initialize app\n\n(defn mount-root []\n  (rdom/render [current-page] (.getElementById js/document \"app\")))\n\n(defn init! []\n  (accountant/configure-navigation!\n   {:nav-handler\n    (fn [path]\n      (let [match (reitit/match-by-path router path)\n            current-page (:name (:data  match))\n            route-params (:path-params match)]\n        (session/put! :route {:current-page (page-for current-page)\n                              :route-params route-params})))\n    :path-exists?\n    (fn [path]\n      (boolean (reitit/match-by-path router path)))})\n  (accountant/dispatch-current!)\n  (mount-root))\n"]}