{"version":3,"sources":["org_blog/posts.cljs"],"mappings":";AASA,AAAKA,8BAAU,2CAAA,cAAA,2CAAA,sDAAA,0BAAA,2DAAA,qFAAA,yDAAA,mFAAA,mDAAA,mFAAA,kDAAA,mFAAA,8CAAA,6BAAA,mFAAA,8CAAA,mFAAA,qDAAA,oCAAA,mFAAA,wDAAA,cAAA,oDAAA,mFAAA,wDAAA,mBAAA,sBAAA,mFAAA,iDAAA,mFAAA,8CAAA,oCAAA,mFAAA,qDAAA,mFAAA,8CAAA,mFAAA,qDAAA,mFAAA,qDAAA,gBAAA,mFAAA,gDAAA,0BAAA,yBAAA,mFAAA,wDAAA,+BAAA,sBAAA,mFAAA,8CAAA,mFAAA,qDAAA,qBAAA,mFAAA,gDAAA,2CAAA,qDAAA,6DAAA,mFAAA,mDAAA,2CAAA,oDAAA,qDAAA,wDAAA,kCAAA,6BAAA,mFAAA,iDAAA,mFAAA,8CAAA,uBAAA,mFAAA,qDAAA,mFAAA,kDAAA,mFAAA,gDAAA,mFAAA,8CAAA,6DAAA,mFAAA,gDAAA,mFAAA,8CAAA,6CAAA,mFAAA,gDAAA,mFAAA,8CAAA,+DAAA,mFAAA,gDAAA,mFAAA,8CAAA,2DAAA,mFAAA,gDAAA,mFAAA,8CAAA,uEAAA,qBAAA,kDAAA,cAAA,8DAAA;AAEf,4BAAA,5BAAMC,gEAAYC;AAAlB,AACE;AAAA,AAAA,0FAAA,+DAAA,mFAAA,kDAAA,oBAAA,mFAAA,kDAGQ,AAACC,4CAAI,WAAAC;AAAA,AAAA,IAAAC,aAAAD;SAAA,AAAAE,4CAAAD,WAAA,IAAA,hEAAMK;IAANH,aAAA,AAAAD,4CAAAD,WAAA,IAAA;IAAAE,iBAAA,AAAAC,4BAAAD;YAAA,AAAAE,4CAAAF,eAAA,nEAAiBI;AAAjB,AAAA,0FAAA,gDAAA,2CAAA,2HAAA,kIAAA,mFAAA,gDAAA,2CAAA,tXACc,CAAA,oDAAaA,qEAAY,CAAA,oDAAaA,4PACtC,iBAAAC,WAAA;IAAAC,WAAA,2CAAA,2DAA0BH;AAA1B,AAAA,wFAAAE,SAAAC,+BAAAD,SAAAC,jIAACX,yCAAAA,4DAAAA;aAFf,SAEuDS;GACvDX;;;AAEf,2BAAA,3BAAMc;AAAN,AACE;AAAA,AACE,IAAMC,eAAa,oBAAA,pBAACC;IACdC,UAAQ,4DAAA,mFAAA,qEAAA,pNAACC,+CAAOH;AADtB,AAEE,OAAA,+JAAKE,xEAAQ,AAACR,4CAAIT","names":["org-blog.posts/id->posts","org-blog.posts/posts-page","path-for","cljs.core.map","p__13239","vec__13240","cljs.core.nth","map__13243","cljs.core/--destructure-map","cljs.core.get","id","title","G__13244","G__13245","org-blog.posts/post-page","routing-data","reagent.session/get","post-id","cljs.core.get_in"],"sourcesContent":["(ns org-blog.posts\n  (:require  [macros.files :as macf]\n             [reagent.session :as session]))\n\n;; TODO:\n;; - org-clj is not parsing headers properly, fix this\n;; - test out images, links\n;; - support arbitrary hiccup within org post (oooh, nice)\n\n(def id->posts (macf/slurp-posts))\n\n(defn posts-page [path-for]\n  (fn []\n    [:span.main\n     [:h1 \"The posts\"]\n     [:ul (map (fn [[id {:keys [title]}]]\n                 [:li {:name (str \"post-\" title) :key (str \"post-\" title)}\n                  [:a {:href (path-for :post {:post-id id})} \"Post: \" title]])\n               id->posts)]]))\n\n(defn post-page []\n  (fn []\n    (let [routing-data (session/get :route)\n          post-id (get-in routing-data [:route-params :post-id])]\n      (->> post-id (get id->posts) :content))))\n\n"]}